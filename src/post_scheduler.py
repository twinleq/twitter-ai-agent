#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Post Scheduler –¥–ª—è AI Twitter Agent
–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import schedule
import time
import threading
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import json
import os
from .config import Config
from .twitter_client import TwitterClient
from .ai_content_generator import AIContentGenerator
from .utils import safe_json_loads, safe_json_dumps, format_timestamp

class PostScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self, config: Config, twitter_client: TwitterClient, ai_generator: AIContentGenerator):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.config = config
        self.twitter_client = twitter_client
        self.ai_generator = ai_generator
        self.logger = logging.getLogger(__name__)
        
        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.schedule_file = './data/post_schedule.json'
        self.post_history_file = './data/post_history.json'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('./data', exist_ok=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self.scheduled_posts = self._load_schedule()
        self.post_history = self._load_history()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self._setup_schedule()
        
        self.logger.info("‚úÖ Post Scheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_schedule(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.schedule_file):
                with open(self.schedule_file, 'r', encoding='utf-8') as f:
                    data = safe_json_loads(f.read(), [])
                    return data if isinstance(data, list) else []
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return []
    
    def _save_schedule(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.schedule_file, 'w', encoding='utf-8') as f:
                f.write(safe_json_dumps(self.scheduled_posts))
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    
    def _load_history(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"""
        try:
            if os.path.exists(self.post_history_file):
                with open(self.post_history_file, 'r', encoding='utf-8') as f:
                    data = safe_json_loads(f.read(), [])
                    return data if isinstance(data, list) else []
            return []
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def _save_history(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤"""
        try:
            with open(self.post_history_file, 'w', encoding='utf-8') as f:
                f.write(safe_json_dumps(self.post_history))
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
        if not self.config.AUTO_POSTING_ENABLED:
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        schedule.every().day.at(f"{self.config.POSTING_SCHEDULE_HOUR:02d}:{self.config.POSTING_SCHEDULE_MINUTE:02d}").do(self._scheduled_post)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        additional_times = self._calculate_additional_post_times()
        for hour, minute in additional_times:
            schedule.every().day.at(f"{hour:02d}:{minute:02d}").do(self._scheduled_post)
        
        self.logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç –≤ {self.config.POSTING_SCHEDULE_HOUR}:{self.config.POSTING_SCHEDULE_MINUTE:02d}")
        if additional_times:
            self.logger.info(f"üìÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã: {len(additional_times)} –≤ –¥–µ–Ω—å")
    
    def _calculate_additional_post_times(self) -> List[tuple]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        if self.config.MAX_POSTS_PER_DAY <= 1:
            return []
        
        additional_posts = self.config.MAX_POSTS_PER_DAY - 1
        times = []
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è (9:00 - 21:00)
        start_hour = 9
        end_hour = 21
        total_hours = end_hour - start_hour
        
        for i in range(additional_posts):
            # –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å –¥–ª—è –ø–æ—Å—Ç–∞
            hour_offset = (i + 1) * total_hours // (additional_posts + 1)
            hour = start_hour + hour_offset
            
            # –°–ª—É—á–∞–π–Ω–∞—è –º–∏–Ω—É—Ç–∞
            minute = 0  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–π: random.randint(0, 59)
            
            times.append((hour, minute))
        
        return times
    
    def _scheduled_post(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
            if self._get_today_post_count() >= self.config.MAX_POSTS_PER_DAY:
                self.logger.info("üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            post_content = self.ai_generator.generate_post()
            if not post_content:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                return
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            tweet_id = self.twitter_client.post_tweet(post_content)
            if tweet_id:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self._add_to_history({
                    'id': tweet_id,
                    'content': post_content,
                    'timestamp': format_timestamp(datetime.now()),
                    'type': 'scheduled',
                    'status': 'published'
                })
                
                self.logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_id}")
            else:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ: {e}")
    
    def _get_today_post_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.now().date()
        count = 0
        
        for post in self.post_history:
            try:
                post_date = datetime.strptime(post['timestamp'], '%Y-%m-%d %H:%M:%S').date()
                if post_date == today and post.get('status') == 'published':
                    count += 1
            except:
                continue
        
        return count
    
    def _add_to_history(self, post_data: Dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.post_history.append(post_data)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –ø–æ—Å—Ç–∞–º–∏
        if len(self.post_history) > 1000:
            self.post_history = self.post_history[-1000:]
        
        self._save_history()
    
    def schedule_custom_post(self, content: str, scheduled_time: datetime) -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            post_data = {
                'content': content,
                'scheduled_time': format_timestamp(scheduled_time),
                'created_at': format_timestamp(datetime.now()),
                'status': 'scheduled'
            }
            
            self.scheduled_posts.append(post_data)
            self._save_schedule()
            
            self.logger.info(f"üìÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {format_timestamp(scheduled_time)}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def schedule_thread(self, main_topic: str, thread_length: int = 3, scheduled_time: Optional[datetime] = None) -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Ç—Ä–µ–¥–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–¥
            tweets = self.ai_generator.generate_thread(main_topic, thread_length)
            if not tweets:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–¥")
                return False
            
            if scheduled_time is None:
                scheduled_time = datetime.now() + timedelta(minutes=5)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–≤–∏—Ç –≤ —Ç—Ä–µ–¥–µ
            current_time = scheduled_time
            for i, tweet_content in enumerate(tweets):
                self.schedule_custom_post(tweet_content, current_time)
                current_time += timedelta(minutes=2)  # 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —Ç–≤–∏—Ç–∞–º–∏
            
            self.logger.info(f"üìÖ –¢—Ä–µ–¥ –∏–∑ {len(tweets)} —Ç–≤–∏—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–¥–∞: {e}")
            return False
    
    def get_scheduled_posts(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        return self.scheduled_posts.copy()
    
    def get_post_history(self, days: int = 7) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        recent_posts = []
        for post in self.post_history:
            try:
                post_date = datetime.strptime(post['timestamp'], '%Y-%m-%d %H:%M:%S')
                if post_date >= cutoff_date:
                    recent_posts.append(post)
            except:
                continue
        
        return recent_posts
    
    def cancel_scheduled_post(self, post_index: int) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç"""
        try:
            if 0 <= post_index < len(self.scheduled_posts):
                post = self.scheduled_posts.pop(post_index)
                self._save_schedule()
                self.logger.info(f"‚ùå –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω: {post.get('content', '')[:50]}...")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞: {e}")
            return False
    
    def process_scheduled_posts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        try:
            current_time = datetime.now()
            posts_to_publish = []
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
            for i, post in enumerate(self.scheduled_posts):
                try:
                    scheduled_time = datetime.strptime(post['scheduled_time'], '%Y-%m-%d %H:%M:%S')
                    if scheduled_time <= current_time and post.get('status') == 'scheduled':
                        posts_to_publish.append((i, post))
                except:
                    continue
            
            # –ü—É–±–ª–∏–∫—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            for i, post in posts_to_publish:
                tweet_id = self.twitter_client.post_tweet(post['content'])
                if tweet_id:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self._add_to_history({
                        'id': tweet_id,
                        'content': post['content'],
                        'timestamp': format_timestamp(datetime.now()),
                        'type': 'scheduled_custom',
                        'status': 'published'
                    })
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    self.scheduled_posts.pop(i)
                    self._save_schedule()
                    
                    self.logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_id}")
                else:
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
                    post['status'] = 'failed'
                    post['error'] = 'Failed to publish'
                    self._save_schedule()
                    
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run_scheduler():
            while True:
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                    self.process_scheduled_posts()
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º schedule
                    schedule.run_pending()
                    
                    # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
                    time.sleep(60)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                    time.sleep(60)
        
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        self.logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        schedule.clear()
        self.logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤"""
        total_posts = len(self.post_history)
        today_posts = self._get_today_post_count()
        scheduled_posts = len(self.scheduled_posts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–æ—Å—Ç–æ–≤
        post_types = {}
        for post in self.post_history:
            post_type = post.get('type', 'unknown')
            post_types[post_type] = post_types.get(post_type, 0) + 1
        
        return {
            'total_posts': total_posts,
            'today_posts': today_posts,
            'scheduled_posts': scheduled_posts,
            'post_types': post_types,
            'max_daily_posts': self.config.MAX_POSTS_PER_DAY
        }

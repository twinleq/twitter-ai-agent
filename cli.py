#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Twitter Agent
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
"""

import argparse
import sys
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

from src.config import Config
from src.twitter_client import TwitterClient
from src.ai_content_generator import AIContentGenerator
from src.post_scheduler import PostScheduler
from src.message_handler import MessageHandler
from src.analytics import Analytics
from src.utils import setup_logging

def setup_cli():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    parser = argparse.ArgumentParser(description='AI Twitter Agent - CLI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    run_parser = subparsers.add_parser('run', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    run_parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ')
    
    # –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
    post_parser = subparsers.add_parser('post', help='–°–æ–∑–¥–∞—Ç—å –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç')
    post_parser.add_argument('--topic', help='–¢–µ–º–∞ –ø–æ—Å—Ç–∞')
    post_parser.add_argument('--dry-run', action='store_true', help='–¢–æ–ª—å–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å')
    post_parser.add_argument('--thread', type=int, help='–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ –∏–∑ N —Ç–≤–∏—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    schedule_parser = subparsers.add_parser('schedule', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º')
    schedule_parser.add_argument('--list', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã')
    schedule_parser.add_argument('--add', help='–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    schedule_parser.add_argument('--time', help='–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (YYYY-MM-DD HH:MM)')
    schedule_parser.add_argument('--cancel', type=int, help='–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_parser = subparsers.add_parser('analytics', help='–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É')
    analytics_parser.add_argument('--days', type=int, default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    analytics_parser.add_argument('--export', help='–≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª (JSON/CSV)')
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–æ–≤
    response_parser = subparsers.add_parser('response', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏')
    response_parser.add_argument('--reply', help='–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–∏—Ç –ø–æ ID')
    response_parser.add_argument('--text', help='–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞')
    response_parser.add_argument('--stats', action='store_true', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_parser = subparsers.add_parser('config', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π')
    config_parser.add_argument('--show', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    config_parser.add_argument('--validate', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    config_parser.add_argument('--test-api', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    
    # –ö–æ–º–∞–Ω–¥–∞ —É—Ç–∏–ª–∏—Ç
    utils_parser = subparsers.add_parser('utils', help='–£—Ç–∏–ª–∏—Ç—ã')
    utils_parser.add_argument('--backup', help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö')
    utils_parser.add_argument('--restore', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    utils_parser.add_argument('--clean', action='store_true', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ')
    
    return parser

def run_bot(args):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ AI Twitter Agent...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    load_dotenv()
    config = Config()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level = 'DEBUG' if args.verbose else 'INFO'
    setup_logging(log_level, config.LOG_FILE)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º main —Ñ—É–Ω–∫—Ü–∏—é
    from main import main
    
    if args.daemon:
        print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å daemon –ª–æ–≥–∏–∫—É
        main()
    else:
        main()

def create_post(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...")
    
    load_dotenv()
    config = Config()
    setup_logging('INFO')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    twitter_client = TwitterClient(config)
    ai_generator = AIContentGenerator(config)
    
    try:
        if args.thread:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
            tweets = ai_generator.generate_thread(args.topic or 'programming', args.thread)
            if tweets:
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–¥ –∏–∑ {len(tweets)} —Ç–≤–∏—Ç–æ–≤:")
                for i, tweet in enumerate(tweets, 1):
                    print(f"\n{i}/{len(tweets)}: {tweet}")
                
                if not args.dry_run:
                    tweet_ids = twitter_client.post_thread(tweets)
                    print(f"‚úÖ –¢—Ä–µ–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {len(tweet_ids)} —Ç–≤–∏—Ç–æ–≤")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–¥")
        else:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
            post = ai_generator.generate_post(args.topic)
            if post:
                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç:\n{post}")
                
                if not args.dry_run:
                    tweet_id = twitter_client.post_tweet(post)
                    if tweet_id:
                        print(f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {tweet_id}")
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def manage_schedule(args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    print("üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...")
    
    load_dotenv()
    config = Config()
    setup_logging('INFO')
    
    twitter_client = TwitterClient(config)
    ai_generator = AIContentGenerator(config)
    scheduler = PostScheduler(config, twitter_client, ai_generator)
    
    try:
        if args.list:
            posts = scheduler.get_scheduled_posts()
            if posts:
                print(f"\nüìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã ({len(posts)}):")
                for i, post in enumerate(posts):
                    print(f"{i}: {post['scheduled_time']} - {post['content'][:50]}...")
            else:
                print("üìã –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        elif args.add:
            if not args.time:
                print("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é --time")
                return
            
            try:
                scheduled_time = datetime.strptime(args.time, '%Y-%m-%d %H:%M')
                success = scheduler.schedule_custom_post(args.add, scheduled_time)
                if success:
                    print(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD HH:MM")
        
        elif args.cancel is not None:
            success = scheduler.cancel_scheduled_post(args.cancel)
            if success:
                print(f"‚úÖ –ü–æ—Å—Ç {args.cancel} –æ—Ç–º–µ–Ω–µ–Ω")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç {args.cancel}")
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: --list, --add –∏–ª–∏ --cancel")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_analytics(args):
    """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {args.days} –¥–Ω–µ–π...")
    
    load_dotenv()
    config = Config()
    setup_logging('INFO')
    
    analytics = Analytics(config)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        post_analytics = analytics.get_post_analytics(args.days)
        response_analytics = analytics.get_response_analytics(args.days)
        daily_stats = analytics.get_daily_stats(args.days)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        report = analytics.generate_report(args.days)
        print(report)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if args.export:
            data = {
                'post_analytics': post_analytics,
                'response_analytics': response_analytics,
                'daily_stats': daily_stats,
                'generated_at': datetime.now().isoformat()
            }
            
            if args.export.endswith('.json'):
                with open(args.export, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
            elif args.export.endswith('.csv'):
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
                print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {args.export}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def manage_responses(args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    print("üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞–º–∏...")
    
    load_dotenv()
    config = Config()
    setup_logging('INFO')
    
    twitter_client = TwitterClient(config)
    ai_generator = AIContentGenerator(config)
    message_handler = MessageHandler(config, twitter_client, ai_generator)
    
    try:
        if args.reply and args.text:
            success = message_handler.manual_response(args.reply, args.text)
            if success:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–≤–∏—Ç {args.reply}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç")
        
        elif args.stats:
            stats = message_handler.get_response_statistics()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:")
            print(f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats['total_responses']}")
            print(f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {stats['recent_responses_24h']}")
            print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['processed_mentions']}")
            print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ DM: {stats['processed_dms']}")
            
            if stats['message_types']:
                print(f"\nüìù –¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:")
                for msg_type, count in stats['message_types'].items():
                    print(f"‚Ä¢ {msg_type}: {count}")
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: --reply —Å --text –∏–ª–∏ --stats")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def manage_config(args):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    print("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
    
    load_dotenv()
    config = Config()
    
    try:
        if args.show:
            print(f"\nüìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            config_dict = config.to_dict()
            for key, value in config_dict.items():
                print(f"‚Ä¢ {key}: {value}")
        
        elif args.validate:
            if config.validate():
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        
        elif args.test_api:
            print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º Twitter API
            twitter_client = TwitterClient(config)
            if twitter_client.verify_credentials():
                print("‚úÖ Twitter API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Twitter API")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
            ai_generator = AIContentGenerator(config)
            test_post = ai_generator.generate_post("test")
            if test_post:
                print("‚úÖ OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API")
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: --show, --validate –∏–ª–∏ --test-api")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def manage_utils(args):
    """–£—Ç–∏–ª–∏—Ç—ã"""
    print("üõ† –£—Ç–∏–ª–∏—Ç—ã...")
    
    try:
        if args.backup:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            import shutil
            import os
            from datetime import datetime
            
            backup_dir = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.makedirs(backup_dir, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if os.path.exists('./data'):
                shutil.copytree('./data', f'{backup_dir}/data')
            
            if os.path.exists('./logs'):
                shutil.copytree('./logs', f'{backup_dir}/logs')
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_dir}")
        
        elif args.restore:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            import shutil
            import os
            
            if os.path.exists(args.restore):
                if os.path.exists(f'{args.restore}/data'):
                    shutil.copytree(f'{args.restore}/data', './data', dirs_exist_ok=True)
                if os.path.exists(f'{args.restore}/logs'):
                    shutil.copytree(f'{args.restore}/logs', './logs', dirs_exist_ok=True)
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {args.restore}")
            else:
                print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {args.restore} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        elif args.clean:
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            import os
            import glob
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            log_files = glob.glob('./logs/*.log*')
            for log_file in log_files:
                if os.path.getmtime(log_file) < (datetime.now().timestamp() - 30 * 24 * 3600):
                    os.remove(log_file)
                    print(f"üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file}")
            
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: --backup, --restore –∏–ª–∏ --clean")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = setup_cli()
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == 'run':
            run_bot(args)
        elif args.command == 'post':
            create_post(args)
        elif args.command == 'schedule':
            manage_schedule(args)
        elif args.command == 'analytics':
            show_analytics(args)
        elif args.command == 'response':
            manage_responses(args)
        elif args.command == 'config':
            manage_config(args)
        elif args.command == 'utils':
            manage_utils(args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            
    except KeyboardInterrupt:
        print("\nüõë –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main()

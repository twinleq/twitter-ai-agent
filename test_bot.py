#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è AI Twitter Agent
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.twitter_client import TwitterClient
from src.ai_content_generator import AIContentGenerator
from src.utils import setup_logging

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    load_dotenv()
    config = Config()
    
    if config.validate():
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    else:
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏")
        return False

def test_twitter_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitter API"""
    print("üê¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Twitter API...")
    
    try:
        load_dotenv()
        config = Config()
        twitter_client = TwitterClient(config)
        
        if twitter_client.verify_credentials():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Twitter API —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = twitter_client.get_user_info(config.BOT_USERNAME)
            if user_info:
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info['username']}")
                print(f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info['metrics']['followers_count']}")
                print(f"üìù –¢–≤–∏—Ç—ã: {user_info['metrics']['tweet_count']}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Twitter API")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Twitter API: {e}")
        return False

def test_openai_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API...")
    
    try:
        load_dotenv()
        config = Config()
        ai_generator = AIContentGenerator(config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
        test_post = ai_generator.generate_post("programming")
        
        if test_post:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API —É—Å–ø–µ—à–Ω–æ")
            print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç:\n{test_post}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}")
        return False

def test_content_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        load_dotenv()
        config = Config()
        ai_generator = AIContentGenerator(config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        topics = ["programming", "ai", "devops"]
        
        for topic in topics:
            post = ai_generator.generate_post(topic)
            if post:
                print(f"‚úÖ –ü–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                print(f"   –î–ª–∏–Ω–∞: {len(post)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—Ä–µ–¥–∞
        thread = ai_generator.generate_thread("programming", 3)
        if thread:
            print(f"‚úÖ –¢—Ä–µ–¥ –∏–∑ {len(thread)} —Ç–≤–∏—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            for i, tweet in enumerate(thread, 1):
                print(f"   {i}: {tweet[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return False

def test_message_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        load_dotenv()
        config = Config()
        ai_generator = AIContentGenerator(config)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–æ–≤–æ–º Python 3.12?",
            "–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å Docker?",
            "Check out this amazing discount!",
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
        ]
        
        for message in test_messages:
            sentiment = ai_generator.analyze_sentiment(message)
            print(f"üìù '{message}' -> {sentiment}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def test_dry_run_post():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ (–±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)...")
    
    try:
        load_dotenv()
        config = Config()
        ai_generator = AIContentGenerator(config)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        post = ai_generator.generate_post("ai")
        
        if post:
            print("‚úÖ –ü–æ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ:")
            print(f"\n{post}\n")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"‚Ä¢ –î–ª–∏–Ω–∞: {len(post)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"‚Ä¢ –õ–∏–º–∏—Ç: {config.MAX_TWEET_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"‚Ä¢ –ü–æ–º–µ—â–∞–µ—Ç—Å—è: {'‚úÖ' if len(post) <= config.MAX_TWEET_LENGTH else '‚ùå'}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
            hashtags = [word for word in post.split() if word.startswith('#')]
            print(f"‚Ä¢ –•–µ—à—Ç–µ–≥–∏: {len(hashtags)} ({', '.join(hashtags)})")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ AI Twitter Agent\n")
    
    setup_logging('INFO')
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("Twitter API", test_twitter_api),
        ("OpenAI API", test_openai_api),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", test_content_generation),
        ("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π", test_message_analysis),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞", test_dry_run_post)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print(f"\n{'='*50}")
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"‚Ä¢ {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if len(sys.argv) > 1:
        test_name = sys.argv[1].lower()
        
        if test_name == "config":
            test_configuration()
        elif test_name == "twitter":
            test_twitter_api()
        elif test_name == "openai":
            test_openai_api()
        elif test_name == "content":
            test_content_generation()
        elif test_name == "analysis":
            test_message_analysis()
        elif test_name == "post":
            test_dry_run_post()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç: {test_name}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: config, twitter, openai, content, analysis, post")
    else:
        run_all_tests()

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Twitter Agent
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""

import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.twitter_client import TwitterClient
from src.ai_content_generator import AIContentGenerator
from src.post_scheduler import PostScheduler
from src.message_handler import MessageHandler
from src.analytics import Analytics

def example_basic_post():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
    print("üìù –ü—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞")
    
    load_dotenv()
    config = Config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    twitter_client = TwitterClient(config)
    ai_generator = AIContentGenerator(config)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    post = ai_generator.generate_post("programming")
    
    if post:
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:\n{post}\n")
        
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        # tweet_id = twitter_client.post_tweet(post)
        # print(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —Å ID: {tweet_id}")
        
        print("‚úÖ –ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

def example_thread_creation():
    """–ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞"""
    print("üßµ –ü—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞")
    
    load_dotenv()
    config = Config()
    
    ai_generator = AIContentGenerator(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –∏–∑ 3 —Ç–≤–∏—Ç–æ–≤ –Ω–∞ —Ç–µ–º—É AI
    thread = ai_generator.generate_thread("artificial intelligence", 3)
    
    if thread:
        print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–¥:")
        for i, tweet in enumerate(thread, 1):
            print(f"\n{i}/{len(thread)}: {tweet}")
        
        print("\n‚úÖ –¢—Ä–µ–¥ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

def example_scheduled_posting():
    """–ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    print("üìÖ –ü—Ä–∏–º–µ—Ä: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤")
    
    load_dotenv()
    config = Config()
    
    twitter_client = TwitterClient(config)
    ai_generator = AIContentGenerator(config)
    scheduler = PostScheduler(config, twitter_client, ai_generator)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
    tomorrow = datetime.now() + timedelta(days=1)
    scheduled_time = tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
    
    custom_post = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –ø—Ä–æ DevOps –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é! üöÄ"
    
    success = scheduler.schedule_custom_post(custom_post, scheduled_time)
    
    if success:
        print(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")

def example_response_generation():
    """–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üí¨ –ü—Ä–∏–º–µ—Ä: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
    
    load_dotenv()
    config = Config()
    
    ai_generator = AIContentGenerator(config)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    test_messages = [
        ("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "greeting"),
        ("–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ –Ω–æ–≤–æ–º Python 3.12?", "question"),
        ("–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å Docker?", "help"),
        ("–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø—Ä–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã!", "general")
    ]
    
    for message, msg_type in test_messages:
        print(f"\nüì® –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        response = ai_generator.generate_response(message, "test_user")
        
        if response:
            print(f"ü§ñ –û—Ç–≤–µ—Ç: {response}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç")

def example_analytics_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üìä –ü—Ä–∏–º–µ—Ä: –†–∞–±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π")
    
    load_dotenv()
    config = Config()
    
    analytics = Analytics(config)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    post_analytics = analytics.get_post_analytics(7)
    
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞ 7 –¥–Ω–µ–π:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {post_analytics.get('total_posts', 0)}")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {post_analytics.get('avg_engagement_rate', 0)}%")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {post_analytics.get('total_likes', 0)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    daily_stats = analytics.get_daily_stats(7)
    
    if daily_stats:
        print("\n–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        for day in daily_stats[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
            print(f"‚Ä¢ {day['date']}: {day['posts_published']} –ø–æ—Å—Ç–æ–≤")

def example_content_themes():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("üé® –ü—Ä–∏–º–µ—Ä: –†–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    load_dotenv()
    config = Config()
    
    ai_generator = AIContentGenerator(config)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
    themes = ["programming", "ai", "devops", "security", "cloud"]
    
    for theme in themes:
        post = ai_generator.generate_post(theme)
        
        if post:
            print(f"\nüéØ –¢–µ–º–∞: {theme}")
            print(f"üìù –ü–æ—Å—Ç: {post[:100]}...")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        import time
        time.sleep(1)

def example_message_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üîç –ü—Ä–∏–º–µ—Ä: –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    load_dotenv()
    config = Config()
    
    ai_generator = AIContentGenerator(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    messages = [
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëç",
        "–≠—Ç–æ –ø–æ–ª–Ω–∞—è –µ—Ä—É–Ω–¥–∞, –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
        "–°–ø–∞–º —Å–ø–∞–º —Å–ø–∞–º –∫—É–ø–∏—Ç–µ —Å–µ–π—á–∞—Å!",
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Docker –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞?"
    ]
    
    for message in messages:
        sentiment = ai_generator.analyze_sentiment(message)
        print(f"üìù '{message}' -> {sentiment}")

def example_custom_configuration():
    """–ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    config = Config()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"‚Ä¢ –Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {config.CONTENT_LANGUAGE}")
    print(f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {config.MAX_POSTS_PER_DAY}")
    print(f"‚Ä¢ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {config.POSTING_SCHEDULE_HOUR}:{config.POSTING_SCHEDULE_MINUTE:02d}")
    print(f"‚Ä¢ –¢–µ–º—ã: {', '.join(config.POST_THEMES)}")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à—Ç–µ–≥–æ–≤: {config.HASHTAG_COUNT}")
    print(f"‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã: {'–≤–∫–ª—é—á–µ–Ω—ã' if config.RESPONSE_ENABLED else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")

def run_all_examples():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ AI Twitter Agent\n")
    
    examples = [
        ("–ë–∞–∑–æ–≤—ã–π –ø–æ—Å—Ç", example_basic_post),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞", example_thread_creation),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤", example_scheduled_posting),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤", example_response_generation),
        ("–†–∞–±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π", example_analytics_usage),
        ("–†–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞", example_content_themes),
        ("–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π", example_message_analysis),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", example_custom_configuration)
    ]
    
    for example_name, example_func in examples:
        print(f"\n{'='*60}")
        print(f"üìã {example_name}")
        print('='*60)
        
        try:
            example_func()
            print("‚úÖ –ü—Ä–∏–º–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {e}")
        
        print()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        example_name = sys.argv[1].lower()
        
        examples_map = {
            "post": example_basic_post,
            "thread": example_thread_creation,
            "schedule": example_scheduled_posting,
            "response": example_response_generation,
            "analytics": example_analytics_usage,
            "themes": example_content_themes,
            "analysis": example_message_analysis,
            "config": example_custom_configuration
        }
        
        if example_name in examples_map:
            examples_map[example_name]()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä: {example_name}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã:", ", ".join(examples_map.keys()))
    else:
        run_all_examples()

if __name__ == "__main__":
    main()
